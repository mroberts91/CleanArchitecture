@page "/fetchdata"
@using CleanArchitecture.Application.WeatherForecasts.Queries.GetWeatherForecasts;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject HttpClient client

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    WeatherForecast[] forecasts;
    static readonly string forecastEndpoint = "api/WeatherForecast";

    protected override async Task OnInitializedAsync()
    {
        var response = await client.GetAsync(forecastEndpoint);
        var json = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
        {
            AllowTrailingCommas = true
        };

        forecasts = JsonSerializer.Deserialize<WeatherForecast[]>(json, options);
    }
}
